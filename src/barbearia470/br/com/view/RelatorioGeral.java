package barbearia470.br.com.view;

import barbearia470.br.com.DAO.ConfEmailDAO;
import barbearia470.br.com.DAO.FuncionarioDAO;
import barbearia470.br.com.DAO.RelatorioDAO;
import barbearia470.br.com.conexao.Conexao;
import barbearia470.br.com.mail.Mail;
import barbearia470.br.com.model.ConfiguracaoEmail;
import barbearia470.br.com.model.Funcionario;
import barbearia470.br.com.model.Relatorio;
import barbearia470.br.com.tabelasModel.ModeloTabela;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.BorderLayout;
import java.awt.Color;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.joda.money.CurrencyUnit;
import org.joda.money.Money;

public class RelatorioGeral extends javax.swing.JFrame {

    /**
     * Creates new form Relatorio
     */
    public RelatorioGeral() {
        initComponents();
        this.setExtendedState(MAXIMIZED_BOTH);
        jButton_enviarPorEmail.setVisible(false);

        pegaFuncionarios();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDateChooser_dataInicial = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jDateChooser_dataFinal = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_relatorio = new javax.swing.JTable();
        jButton_buscar = new javax.swing.JButton();
        jComboBox_funcionario = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jPanel_graficoValoresTotais = new javax.swing.JPanel();
        jButton_enviarPorEmail = new javax.swing.JButton();
        jMenuBar_menuBar = new javax.swing.JMenuBar();
        jMenu_cadastro = new javax.swing.JMenu();
        jMenuItem_clientes = new javax.swing.JMenuItem();
        jMenuItem_funcionarios = new javax.swing.JMenuItem();
        jMenuItem_servicos = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem_vendaDoDia = new javax.swing.JMenuItem();
        jMenu_relatorio = new javax.swing.JMenu();
        jMenuItem_relatorioPorDia = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem_confEmail = new javax.swing.JMenuItem();
        jMenu_sair = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Relatório por periodo");

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel1.setText("Data Inicial");

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel2.setText("Data Final");

        jTable_relatorio.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable_relatorio.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable_relatorio.setRowHeight(21);
        jTable_relatorio.setShowGrid(true);
        jTable_relatorio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_relatorioMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_relatorio);

        jButton_buscar.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButton_buscar.setText("Buscar");
        jButton_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_buscarActionPerformed(evt);
            }
        });

        jComboBox_funcionario.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Nenhum--" }));
        jComboBox_funcionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_funcionarioActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel3.setText("Funcionario");

        jPanel_graficoValoresTotais.setBackground(new java.awt.Color(204, 204, 204));
        jPanel_graficoValoresTotais.setLayout(new java.awt.BorderLayout());

        jButton_enviarPorEmail.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButton_enviarPorEmail.setText("Enviar por Email");
        jButton_enviarPorEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_enviarPorEmailActionPerformed(evt);
            }
        });

        jMenu_cadastro.setText("Cadastro");

        jMenuItem_clientes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/barbearia470/br/com/images/barber.png"))); // NOI18N
        jMenuItem_clientes.setText("Clientes");
        jMenuItem_clientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_clientesActionPerformed(evt);
            }
        });
        jMenu_cadastro.add(jMenuItem_clientes);

        jMenuItem_funcionarios.setIcon(new javax.swing.ImageIcon(getClass().getResource("/barbearia470/br/com/images/barber_funcionario.png"))); // NOI18N
        jMenuItem_funcionarios.setText("Funcionários");
        jMenuItem_funcionarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_funcionariosActionPerformed(evt);
            }
        });
        jMenu_cadastro.add(jMenuItem_funcionarios);

        jMenuItem_servicos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/barbearia470/br/com/images/barberiro.png"))); // NOI18N
        jMenuItem_servicos.setText("Serviços/Produtos");
        jMenuItem_servicos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_servicosActionPerformed(evt);
            }
        });
        jMenu_cadastro.add(jMenuItem_servicos);

        jMenuBar_menuBar.add(jMenu_cadastro);

        jMenu2.setText("Vendas");

        jMenuItem_vendaDoDia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/list.png"))); // NOI18N
        jMenuItem_vendaDoDia.setText("Vendas do Dia");
        jMenuItem_vendaDoDia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_vendaDoDiaActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem_vendaDoDia);

        jMenuBar_menuBar.add(jMenu2);

        jMenu_relatorio.setText("Relatorio");

        jMenuItem_relatorioPorDia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/progress-report.png"))); // NOI18N
        jMenuItem_relatorioPorDia.setText("Por dia");
        jMenuItem_relatorioPorDia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_relatorioPorDiaActionPerformed(evt);
            }
        });
        jMenu_relatorio.add(jMenuItem_relatorioPorDia);

        jMenuBar_menuBar.add(jMenu_relatorio);

        jMenu1.setText("Configuração");

        jMenuItem_confEmail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/message.png"))); // NOI18N
        jMenuItem_confEmail.setText("Email");
        jMenuItem_confEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_confEmailActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem_confEmail);

        jMenuBar_menuBar.add(jMenu1);

        jMenu_sair.setText("Sair");
        jMenuBar_menuBar.add(jMenu_sair);

        setJMenuBar(jMenuBar_menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jDateChooser_dataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jDateChooser_dataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(15, 15, 15)
                        .addComponent(jComboBox_funcionario, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton_buscar)
                        .addGap(18, 18, 18)
                        .addComponent(jButton_enviarPorEmail))
                    .addComponent(jPanel_graficoValoresTotais, javax.swing.GroupLayout.PREFERRED_SIZE, 731, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(234, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jComboBox_funcionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3)
                                .addComponent(jButton_buscar))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel1)
                                .addComponent(jDateChooser_dataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2)
                                .addComponent(jDateChooser_dataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton_enviarPorEmail)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel_graficoValoresTotais, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable_relatorioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_relatorioMouseClicked

        Conexao conexao = new Conexao();
        Connection conn = conexao.conectar();

        conexao.desconectar();
    }//GEN-LAST:event_jTable_relatorioMouseClicked

    private void jButton_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_buscarActionPerformed

        SimpleDateFormat dia = new SimpleDateFormat("yyyy-MM-dd");

        if (verificaDatas() && verificarBarbeiro()) {

            String dataInicial = dia.format(jDateChooser_dataInicial.getDate());
            String dataFinal = dia.format(jDateChooser_dataFinal.getDate());

            Relatorio relatorio = new Relatorio();
            RelatorioDAO relatorioDAO = new RelatorioDAO();

            int idBarbeiro = pegaIdBarbeiro();

            relatorio.setDataInicial(dataInicial);
            relatorio.setDataFinal(dataFinal);
            relatorio.setBarbeiroId(idBarbeiro);

            Relatorio relatorioPeriodo = relatorioDAO.totalVendaPeriodo(relatorio); //NAO USO
            Relatorio relatorioPeriodo2 = relatorioDAO.totalVendaPeriodo2(relatorio);

            if (relatorioPeriodo != null) {
                preencheTabela(relatorio);
                criaGraficoValoresTotais(relatorioPeriodo2);
                jButton_enviarPorEmail.setVisible(true);

            } else {
                JOptionPane.showMessageDialog(null, "Não há registros neste periodo");
                preencheTabela(relatorio);
                criaGraficoValoresTotais(relatorioPeriodo2);
            }

        }


    }//GEN-LAST:event_jButton_buscarActionPerformed

    private void jComboBox_funcionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_funcionarioActionPerformed

//        CadastroFuncionario cadastroFuncionario = new CadastroFuncionario();
//        cadastroFuncionario.setVisible(true);
//        dispose();

    }//GEN-LAST:event_jComboBox_funcionarioActionPerformed

    private void jMenuItem_clientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_clientesActionPerformed

        CadastroCliente cadastroCliente = new CadastroCliente();
        cadastroCliente.setVisible(true);
        dispose();
    }//GEN-LAST:event_jMenuItem_clientesActionPerformed

    private void jMenuItem_funcionariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_funcionariosActionPerformed

        CadastroFuncionario cadastroFuncionario = new CadastroFuncionario();
        cadastroFuncionario.setVisible(true);
        dispose();
    }//GEN-LAST:event_jMenuItem_funcionariosActionPerformed

    private void jMenuItem_servicosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_servicosActionPerformed

        CadastroServicoProdutos cadastroServico = new CadastroServicoProdutos();
        cadastroServico.setVisible(true);
        dispose();
    }//GEN-LAST:event_jMenuItem_servicosActionPerformed

    private void jMenuItem_vendaDoDiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_vendaDoDiaActionPerformed

        MenuPrincipal menuPrincipal = new MenuPrincipal();
        menuPrincipal.setVisible(true);
        dispose();
    }//GEN-LAST:event_jMenuItem_vendaDoDiaActionPerformed

    private void jMenuItem_relatorioPorDiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_relatorioPorDiaActionPerformed

        RelatorioPorDia relatorioPorDia = new RelatorioPorDia();
        relatorioPorDia.setVisible(true);
        dispose();
    }//GEN-LAST:event_jMenuItem_relatorioPorDiaActionPerformed

    private void jButton_enviarPorEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_enviarPorEmailActionPerformed

        enviaEmail();

    }//GEN-LAST:event_jButton_enviarPorEmailActionPerformed

    private void jMenuItem_confEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_confEmailActionPerformed

        ConfEmail configuracaoEmail = new ConfEmail();
        configuracaoEmail.setVisible(true);
    }//GEN-LAST:event_jMenuItem_confEmailActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RelatorioGeral.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RelatorioGeral.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RelatorioGeral.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RelatorioGeral.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RelatorioGeral().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_buscar;
    private javax.swing.JButton jButton_enviarPorEmail;
    private javax.swing.JComboBox jComboBox_funcionario;
    private com.toedter.calendar.JDateChooser jDateChooser_dataFinal;
    private com.toedter.calendar.JDateChooser jDateChooser_dataInicial;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar_menuBar;
    private javax.swing.JMenuItem jMenuItem_clientes;
    private javax.swing.JMenuItem jMenuItem_confEmail;
    private javax.swing.JMenuItem jMenuItem_funcionarios;
    private javax.swing.JMenuItem jMenuItem_relatorioPorDia;
    private javax.swing.JMenuItem jMenuItem_servicos;
    private javax.swing.JMenuItem jMenuItem_vendaDoDia;
    private javax.swing.JMenu jMenu_cadastro;
    private javax.swing.JMenu jMenu_relatorio;
    private javax.swing.JMenu jMenu_sair;
    private javax.swing.JPanel jPanel_graficoValoresTotais;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_relatorio;
    // End of variables declaration//GEN-END:variables

    //Pega funcionarios
    public void pegaFuncionarios() {
        Conexao conexao = new Conexao();
        Connection conn = conexao.conectar();

        try (Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery("SELECT *FROM Funcionarios")) {

            while (rs.next()) {

                Funcionario funcionario = new Funcionario();
                funcionario.setNome(rs.getString("nome"));
                funcionario.setTelefone(rs.getString("telefone"));
                funcionario.setCPF(rs.getString("cpf"));
                funcionario.setEmail(rs.getString("email"));
                funcionario.setDataDispensado(rs.getString("dataDispensado"));
                funcionario.setDataContratado(rs.getString("dataContratado"));
                funcionario.setAtivo(rs.getBoolean("ativo"));

                if (funcionario.isAtivo()) {
                    jComboBox_funcionario.addItem(funcionario.getNome());
                }

            }

            conexao.desconectar();

        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }
    }

    private int pegaIdBarbeiro() {

        FuncionarioDAO funcionarioDAO = new FuncionarioDAO();
        Funcionario funcionario = funcionarioDAO.pegaFuncionarioPorNome(jComboBox_funcionario.getSelectedItem().toString());
        return funcionario.getFuncionarioId();
    }

    private void preencheTabela(Relatorio relatorio) {

        ArrayList dados = new ArrayList();
        String[] colunas = new String[]{"Dia", "Total dia", "Total Bebidas", "Total Produtos", "Total Serviço", "Total Outros",
            "Dinheiro", "Cartão", "Cabelo", "Barba", "Cabelo/Barba", "Degrade", "Maquina", "Total Dinheiro", "Total Cartão",
            "Bebidas", "Produtos", "Outros", "Atendimentos"};

        Conexao conexao = new Conexao();
        Connection conn = conexao.conectar();

        String sql = "SELECT  data,  "
                + "SUM(CASE WHEN totalVenda != '' THEN totalVenda ELSE 0 END) as totalDia, "
                + "SUM(CASE WHEN totalBebidas != '' THEN totalBebidas ELSE 0 END) as totalBebidas, "
                + "SUM(CASE WHEN totalProdutos != '' THEN totalProdutos ELSE 0 END) as totalProdutos, "
                + "SUM(CASE WHEN totalServico != '' THEN totalServico ELSE 0 END) as totalServicos, "
                + "SUM(CASE WHEN valorOutros != '' THEN valorOutros ELSE 0 END) as totalOutros, "
                + "SUM(CASE WHEN pagamento = 'Dinheiro' THEN 1 ELSE 0 END) as dinheiro, "
                + "SUM(CASE WHEN pagamento = 'Cartão' THEN 1 ELSE 0 END) as cartao, "
                + "SUM(CASE WHEN nomeServico = 'Corte' THEN 1 ELSE 0 END) as cabelo, "
                + "SUM(CASE WHEN nomeServico = 'Barba' THEN 1 ELSE 0 END) as barba, "
                + "SUM(CASE WHEN nomeServico = 'Corte e Barba' THEN 1 ELSE 0 END) as cabeloBarba, "
                + "SUM(CASE WHEN nomeServico = 'Degrade' THEN 1 ELSE 0 END) as degrade, "
                + "SUM(CASE WHEN nomeServico = 'Maquina' THEN 1 ELSE 0 END) as maquina, "
                + "SUM(CASE WHEN pagamento = 'Dinheiro' THEN totalVenda ELSE 0 END) as totalDinheiro, "
                + "SUM(CASE WHEN pagamento = 'Cartão' THEN totalVenda ELSE 0 END) as totalCartao, "
                + "SUM(CASE WHEN quantidadeBebidas != '' THEN quantidadeBebidas ELSE 0 END) as quantidadeBebidas, "
                + "SUM(CASE WHEN quantidadeProdutos != '' THEN quantidadeProdutos ELSE 0 END) as quantidadeProdutos, "
                + "SUM(CASE WHEN outros  THEN outros ELSE 0 END) as quantidadeOutros, "
                + "count(*) as atendimentos FROM vendas "
                + "WHERE data BETWEEN ? AND ? AND idFuncionario = ? GROUP BY data;";

        try (PreparedStatement pst = conn.prepareStatement(sql)) {

            pst.setString(1, relatorio.getDataInicial());
            pst.setString(2, relatorio.getDataFinal());
            pst.setInt(3, relatorio.getBarbeiroId());
            ResultSet rs = pst.executeQuery();

            while (rs.next()) {

                SimpleDateFormat dia = new SimpleDateFormat("yyyy-MM-dd");
                Date date = dia.parse(rs.getString("data"));

                DateFormat formatBR = new SimpleDateFormat("dd/MM/yyyy");
                String dateFormated = formatBR.format(date);

                CurrencyUnit real = CurrencyUnit.of("BRL");
                Money totalDia = Money.of(real, rs.getBigDecimal("totalDia"));
                Money totalBebidas = Money.of(real, rs.getBigDecimal("totalBebidas"));
                Money totalProdutos = Money.of(real, rs.getBigDecimal("totalProdutos"));
                Money totalServicos = Money.of(real, rs.getBigDecimal("totalServicos"));
                Money totalOutros = Money.of(real, rs.getBigDecimal("totalOutros"));
                Money totalDinheiro = Money.of(real, rs.getBigDecimal("totalDinheiro"));
                Money totalCartao = Money.of(real, rs.getBigDecimal("totalCartao"));

                dados.add(new Object[]{
                    dateFormated,
                    totalDia,
                    totalBebidas,
                    totalProdutos,
                    totalServicos,
                    totalOutros,
                    rs.getInt("dinheiro"),
                    rs.getInt("cartao"),
                    rs.getInt("cabelo"),
                    rs.getInt("barba"),
                    rs.getInt("cabeloBarba"),
                    rs.getInt("degrade"),
                    rs.getInt("maquina"),
                    totalDinheiro,
                    totalCartao,
                    rs.getInt("quantidadeBebidas"),
                    rs.getInt("quantidadeProdutos"),
                    rs.getInt("quantidadeOutros"),
                    rs.getInt("atendimentos"),});

            }

            conexao.desconectar();

        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        } catch (ParseException ex) {
            Logger.getLogger(RelatorioGeral.class.getName()).log(Level.SEVERE, null, ex);
        }

        ModeloTabela modelo = new ModeloTabela(dados, colunas);

        jTable_relatorio.setModel(modelo);
        jTable_relatorio.setFont(new java.awt.Font("Arial", 0, 16));

        //Dia
        jTable_relatorio.getColumnModel().getColumn(0).setPreferredWidth(100);
        jTable_relatorio.getColumnModel().getColumn(0).setResizable(false);

        //total dia
        jTable_relatorio.getColumnModel().getColumn(1).setPreferredWidth(110);
        jTable_relatorio.getColumnModel().getColumn(1).setResizable(false);

        //total Bebidas
        jTable_relatorio.getColumnModel().getColumn(2).setPreferredWidth(110);
        jTable_relatorio.getColumnModel().getColumn(2).setResizable(false);

        //total Produtos
        jTable_relatorio.getColumnModel().getColumn(3).setPreferredWidth(110);
        jTable_relatorio.getColumnModel().getColumn(3).setResizable(false);

        //Total servicos
        jTable_relatorio.getColumnModel().getColumn(4).setPreferredWidth(110);
        jTable_relatorio.getColumnModel().getColumn(4).setResizable(false);

        //Total Outros
        jTable_relatorio.getColumnModel().getColumn(5).setPreferredWidth(110);
        jTable_relatorio.getColumnModel().getColumn(5).setResizable(false);

        //Dinheiro
        jTable_relatorio.getColumnModel().getColumn(6).setPreferredWidth(70);
        jTable_relatorio.getColumnModel().getColumn(6).setResizable(false);

        //Cartao 
        jTable_relatorio.getColumnModel().getColumn(7).setPreferredWidth(70);
        jTable_relatorio.getColumnModel().getColumn(7).setResizable(false);

        //Cabelo
        jTable_relatorio.getColumnModel().getColumn(8).setPreferredWidth(70);
        jTable_relatorio.getColumnModel().getColumn(8).setResizable(false);

        //barba
        jTable_relatorio.getColumnModel().getColumn(9).setPreferredWidth(70);
        jTable_relatorio.getColumnModel().getColumn(9).setResizable(false);

        //Cabelo Barba
        jTable_relatorio.getColumnModel().getColumn(10).setPreferredWidth(100);
        jTable_relatorio.getColumnModel().getColumn(10).setResizable(false);

        //Degrade
        jTable_relatorio.getColumnModel().getColumn(11).setPreferredWidth(70);
        jTable_relatorio.getColumnModel().getColumn(11).setResizable(false);

        //Maquina
        jTable_relatorio.getColumnModel().getColumn(12).setPreferredWidth(70);
        jTable_relatorio.getColumnModel().getColumn(12).setResizable(false);

        //Total Dinheiro
        jTable_relatorio.getColumnModel().getColumn(13).setPreferredWidth(110);
        jTable_relatorio.getColumnModel().getColumn(13).setResizable(false);

        //Total Cartao 
        jTable_relatorio.getColumnModel().getColumn(14).setPreferredWidth(110);
        jTable_relatorio.getColumnModel().getColumn(14).setResizable(false);

        //Quantidade Bebidas
        jTable_relatorio.getColumnModel().getColumn(15).setPreferredWidth(80);
        jTable_relatorio.getColumnModel().getColumn(15).setResizable(false);

        //Quantidade Produtos
        jTable_relatorio.getColumnModel().getColumn(16).setPreferredWidth(80);
        jTable_relatorio.getColumnModel().getColumn(16).setResizable(false);

        //Quantidade Outros
        jTable_relatorio.getColumnModel().getColumn(17).setPreferredWidth(80);
        jTable_relatorio.getColumnModel().getColumn(17).setResizable(false);

        //Atendimentos
        jTable_relatorio.getColumnModel().getColumn(18).setPreferredWidth(90);
        jTable_relatorio.getColumnModel().getColumn(18).setResizable(false);

        jTable_relatorio.getTableHeader().setReorderingAllowed(false);
        jTable_relatorio.setAutoResizeMode(jTable_relatorio.AUTO_RESIZE_OFF);

        jTable_relatorio.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        conexao.desconectar();

    }

    private boolean verificaDatas() {

        if (jDateChooser_dataInicial.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Informe a Data Inicial", "Atenção", JOptionPane.WARNING_MESSAGE);
            return false;
        }

        if (jDateChooser_dataFinal.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Informe a Data Final", "Atenção", JOptionPane.WARNING_MESSAGE);
            return false;
        }

        if (jDateChooser_dataInicial.getDate().after(jDateChooser_dataFinal.getDate())) {
            JOptionPane.showMessageDialog(null, "Data Inicial deve ser menor que data Final", "Atenção", JOptionPane.WARNING_MESSAGE);
            jDateChooser_dataInicial.setDate(null);
            jDateChooser_dataFinal.setDate(null);
            return false;
        }

        return true;
    }

    private boolean verificarBarbeiro() {

        if (jComboBox_funcionario.getSelectedItem().toString().indexOf("--Nenhum--") > -1) {
            JOptionPane.showMessageDialog(null, "Selecione um Barbeiro!", "Atenção", JOptionPane.WARNING_MESSAGE);
            return false;
        }

        return true;

    }

    private void criaGraficoValoresTotais(Relatorio relatorio) {

        DefaultCategoryDataset ds = new DefaultCategoryDataset();

        CurrencyUnit real = CurrencyUnit.of("BRL");
        Money total = Money.of(real, 0);

        if (relatorio != null) {
            ds.addValue(relatorio.getTotalDinheiro(), "Total", "Dinheiro");
            ds.addValue(relatorio.getTotalCartao(), "Total", "Cartão");
            ds.addValue(relatorio.getTotalServico(), "Total", "Servico");
            ds.addValue(relatorio.getTotalBebidas(), "Total", "Bebidas");
            ds.addValue(relatorio.getTotalProdutos(), "Total", "Produtos");
            ds.addValue(relatorio.getTotalOutros(), "Total", "Outros");
            total = Money.of(real, relatorio.getTotalDinheiro().add(relatorio.getTotalCartao()));

        } else {
            ds.addValue(0, "Total", "Dinheiro");
            ds.addValue(0, "Total", "Cartão");
            ds.addValue(0, "Total", "Servico");
            ds.addValue(0, "Total", "Bebidas");
            ds.addValue(0, "Total", "Produtos");
            ds.addValue(0, "Total", "Outros");
            total = Money.of(real, 0);

        }

        // cria o gráfico
        JFreeChart grafico = ChartFactory.createBarChart(
                "Total no Periodo: " + total.getAmount() + " R$",
                "Pagamentos", "",
                ds,
                PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot categoryPlot = grafico.getCategoryPlot();
        categoryPlot.setRangeGridlinePaint(Color.BLACK);

        ChartPanel chartPanel = new ChartPanel(grafico);
        jPanel_graficoValoresTotais.removeAll();
        jPanel_graficoValoresTotais.add(chartPanel, BorderLayout.CENTER);
        jPanel_graficoValoresTotais.validate();

    }

    private void enviaEmail() {

        ConfEmailDAO confEmailDAO = new ConfEmailDAO();
        ConfiguracaoEmail configuracaoEmail = confEmailDAO.pegaConfiguracao();

        if (configuracaoEmail != null) {

            //gera PDF
            geraPDF();
            String pdfPath = "src/reports/report.pdf";

            Mail mail = new Mail(configuracaoEmail.getEmail(), configuracaoEmail.getSenha());
            String[] toArr = {configuracaoEmail.getEmail()};
            mail.set_from(configuracaoEmail.getEmail());
            mail.set_subject("Relatorio");

            Object[] options = {"Sim", "Não"}; //0 sim 1 não
            int confirmacao = JOptionPane.showOptionDialog(null, "Deseja incluir " + jComboBox_funcionario.getSelectedItem() + " no E-mail?", "Atenção", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);

            if (confirmacao == 0) {
                String funcionarioEmail = pegaEmailFuncionario();
                if (funcionarioEmail != null) {
                    String[] toArrCop = {configuracaoEmail.getEmail(), funcionarioEmail};
                    mail.set_to(toArrCop);
                } else {
                    mail.set_to(toArr);
                }
            } else {
                mail.set_to(toArr);
            }

            try {
                mail.addAttachment(pdfPath);
            } catch (Exception ex) {
                
                Logger.getLogger(RelatorioGeral.class.getName()).log(Level.SEVERE, null, ex);
            }

            mail.setBody("Obrigado");

            try {
                if (mail.send()) {
                    JOptionPane.showMessageDialog(null, "E-mail Enviado");
                } else {
                    JOptionPane.showMessageDialog(null, "Houve uma falha ao tentar enviar o E-mail");
                }

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Ocorreu um erro ao tentar enviar o E-mail" + ex);
                Logger.getLogger(RelatorioGeral.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }

    private void geraPDF() {

        try {
            Document document = new Document(PageSize.LEGAL.rotate());
            PdfWriter.getInstance(document, new FileOutputStream("src/reports/report.pdf"));

            SimpleDateFormat dataInicio = new SimpleDateFormat("dd/MM/yyyy");
            SimpleDateFormat dataFim = new SimpleDateFormat("dd/MM/yyyy");

            document.open();

            Image img = Image.getInstance("src/icon/logo_barbearia_470.png");
            img.scaleAbsolute(50f, 50f);
            document.add(img);

            Paragraph titulo = new Paragraph("Relatorio");
            titulo.setAlignment(Element.ALIGN_CENTER);
            document.add(titulo);

            document.add(new Paragraph(" "));

            Paragraph subtitulo = new Paragraph("Periodo " + dataInicio.format(jDateChooser_dataInicial.getDate()) + " até "
                    + dataFim.format(jDateChooser_dataFinal.getDate())
                    + " Funcionário " + jComboBox_funcionario.getSelectedItem());
            subtitulo.setAlignment(Element.ALIGN_CENTER);
            document.add(subtitulo);

            document.add(new Paragraph(" "));
            PdfPTable table = criaCorpoPDF();
            document.add(table);

            document.add(new Paragraph(" "));
            Paragraph titulo2 = new Paragraph("Soma Total");
            titulo2.setAlignment(Element.ALIGN_CENTER);
            document.add(titulo2);

            document.add(new Paragraph(" "));
            PdfPTable tableTotal = criaCorpoPDFvalorTotal();
            document.add(tableTotal);

            document.close();
        } catch (DocumentException ex) {
            Logger.getLogger(RelatorioGeral.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(RelatorioGeral.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(RelatorioGeral.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private PdfPTable criaCorpoPDF() {

        Conexao conexao = new Conexao();
        Connection conn = conexao.conectar();

        PdfPTable table = new PdfPTable(9);
        table.setWidthPercentage(100);

        PdfPCell cell = new PdfPCell(new Phrase("Dia"));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Total dia"));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Total Bebidas"));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Total Produtos"));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Total Serviços"));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Total Outros"));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Total Dinheiro"));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Total Cartão"));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Atendimentos"));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
        table.setHeaderRows(1);

        String sql = "SELECT  data,  "
                + "SUM(CASE WHEN totalVenda != '' THEN totalVenda ELSE 0 END) as totalDia, "
                + "SUM(CASE WHEN totalBebidas != '' THEN totalBebidas ELSE 0 END) as totalBebidas, "
                + "SUM(CASE WHEN totalProdutos != '' THEN totalProdutos ELSE 0 END) as totalProdutos, "
                + "SUM(CASE WHEN totalServico != '' THEN totalServico ELSE 0 END) as totalServicos, "
                + "SUM(CASE WHEN valorOutros != '' THEN valorOutros ELSE 0 END) as totalOutros, "
                + "SUM(CASE WHEN pagamento = 'Dinheiro' THEN totalVenda ELSE 0 END) as totalDinheiro, "
                + "SUM(CASE WHEN pagamento = 'Cartão' THEN totalVenda ELSE 0 END) as totalCartao, "
                + "count(*) as atendimentos FROM vendas "
                + "WHERE data BETWEEN ? AND ? AND idFuncionario = ? GROUP BY data;";

        try (PreparedStatement pst = conn.prepareStatement(sql)) {
            SimpleDateFormat dia = new SimpleDateFormat("yyyy-MM-dd");
            String dataInicial = dia.format(jDateChooser_dataInicial.getDate());
            String dataFinal = dia.format(jDateChooser_dataFinal.getDate());
            int idBarbeiro = pegaIdBarbeiro();

            pst.setString(1, dataInicial);
            pst.setString(2, dataFinal);
            pst.setInt(3, idBarbeiro);

            ResultSet rs = pst.executeQuery();

            while (rs.next()) {

                CurrencyUnit real = CurrencyUnit.of("BRL");
                Money totalDia = Money.of(real, rs.getBigDecimal("totalDia"));
                Money totalBebidas = Money.of(real, rs.getBigDecimal("totalBebidas"));
                Money totalProdutos = Money.of(real, rs.getBigDecimal("totalProdutos"));
                Money totalServicos = Money.of(real, rs.getBigDecimal("totalServicos"));
                Money totalOutros = Money.of(real, rs.getBigDecimal("totalOutros"));
                Money totalDinheiro = Money.of(real, rs.getBigDecimal("totalDinheiro"));
                Money totalCartao = Money.of(real, rs.getBigDecimal("totalCartao"));

                cell.setColspan(4);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setBackgroundColor(BaseColor.GREEN);

                //Primeiro converte de String para Date
                DateFormat formatUS = new SimpleDateFormat("yyyy-MM-dd");
                Date date = formatUS.parse(rs.getString("data"));

               //Depois formata data
                DateFormat formatBR = new SimpleDateFormat("dd/MM/yyyy");
                String dateFormated = formatBR.format(date);

                table.addCell(dateFormated);
                table.addCell(totalDia.toString());
                table.addCell(totalBebidas.toString());
                table.addCell(totalProdutos.toString());
                table.addCell(totalServicos.toString());
                table.addCell(totalOutros.toString());
                table.addCell(totalDinheiro.toString());
                table.addCell(totalCartao.toString());
                table.addCell(rs.getString("atendimentos"));

            }

        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        } catch (ParseException ex) {
            Logger.getLogger(RelatorioGeral.class.getName()).log(Level.SEVERE, null, ex);
        }

        conexao.desconectar();

        return table;

    }

    private String pegaEmailFuncionario() {

        Conexao conexao = new Conexao();
        Connection conn = conexao.conectar();

        String sql = "SELECT email FROM Funcionarios WHERE nome = ?";

        try (PreparedStatement pst = conn.prepareStatement(sql)) {

            pst.setString(1, jComboBox_funcionario.getSelectedItem().toString());

            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                return rs.getString("email");
            }

            conexao.desconectar();

        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

        return null;

    }

    private PdfPTable criaCorpoPDFvalorTotal() {

        Conexao conexao = new Conexao();
        Connection conn = conexao.conectar();

        PdfPTable table = new PdfPTable(8);
        table.setWidthPercentage(100);

        PdfPCell cell = new PdfPCell(new Phrase("Soma dos Dias"));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Soma Bebidas"));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Soma Produtos"));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Soma Serviços"));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Soma Outros"));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Soma Dinheiro"));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Soma Cartão"));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Soma Atenimentos"));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        table.setHeaderRows(1);

        String sql = "SELECT "
                + "SUM(CASE WHEN totalVenda != '' THEN totalVenda ELSE 0 END) as totalDia, "
                + "SUM(CASE WHEN totalBebidas != '' THEN totalBebidas ELSE 0 END) as totalBebidas, "
                + "SUM(CASE WHEN totalProdutos != '' THEN totalProdutos ELSE 0 END) as totalProdutos, "
                + "SUM(CASE WHEN totalServico != '' THEN totalServico ELSE 0 END) as totalServicos, "
                + "SUM(CASE WHEN valorOutros != '' THEN valorOutros ELSE 0 END) as totalOutros, "
                + "SUM(CASE WHEN pagamento = 'Dinheiro' THEN totalVenda ELSE 0 END) as totalDinheiro, "
                + "SUM(CASE WHEN pagamento = 'Cartão' THEN totalVenda ELSE 0 END) as totalCartao, "
                + "count(*) as atendimentos FROM vendas "
                + "WHERE data BETWEEN ? AND ? AND idFuncionario = ?";

        try (PreparedStatement pst = conn.prepareStatement(sql)) {
            SimpleDateFormat dia = new SimpleDateFormat("yyyy-MM-dd");
            String dataInicial = dia.format(jDateChooser_dataInicial.getDate());
            String dataFinal = dia.format(jDateChooser_dataFinal.getDate());
            int idBarbeiro = pegaIdBarbeiro();

            pst.setString(1, dataInicial);
            pst.setString(2, dataFinal);
            pst.setInt(3, idBarbeiro);

            ResultSet rs = pst.executeQuery();

            if (rs.next()) {

                CurrencyUnit real = CurrencyUnit.of("BRL");
                Money totalDia = Money.of(real, rs.getBigDecimal("totalDia"));
                Money totalBebidas = Money.of(real, rs.getBigDecimal("totalBebidas"));
                Money totalProdutos = Money.of(real, rs.getBigDecimal("totalProdutos"));
                Money totalServicos = Money.of(real, rs.getBigDecimal("totalServicos"));
                Money totalOutros = Money.of(real, rs.getBigDecimal("totalOutros"));
                Money totalDinheiro = Money.of(real, rs.getBigDecimal("totalDinheiro"));
                Money totalCartao = Money.of(real, rs.getBigDecimal("totalCartao"));

                cell.setColspan(4);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setBackgroundColor(BaseColor.GREEN);

                table.addCell(totalDia.toString());
                table.addCell(totalBebidas.toString());
                table.addCell(totalProdutos.toString());
                table.addCell(totalServicos.toString());
                table.addCell(totalOutros.toString());
                table.addCell(totalDinheiro.toString());
                table.addCell(totalCartao.toString());
                table.addCell(rs.getString("atendimentos"));

            }

        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

        conexao.desconectar();

        return table;
    }

}
